// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web.Models.EF;

#nullable disable

namespace Web.Migrations
{
    [DbContext(typeof(ShopContext))]
    [Migration("20220620114210_start24")]
    partial class start24
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Web.Models.Linked.Accessory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductID")
                        .IsUnique();

                    b.ToTable("Accessories");
                });

            modelBuilder.Entity("Web.Models.Linked.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PostId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Web.Models.Linked.Notebook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short?>("BatteryCapacity")
                        .HasColumnType("smallint");

                    b.Property<string>("Camera")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HDDSize")
                        .HasColumnType("int");

                    b.Property<int>("OSId")
                        .HasColumnType("int");

                    b.Property<string>("Optional")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Outputs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProcessorId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<byte>("RAMCount")
                        .HasColumnType("tinyint");

                    b.Property<int?>("SSDSize")
                        .HasColumnType("int");

                    b.Property<string>("ScreenResolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ScreenSize")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<int?>("ScreenTypeId")
                        .HasColumnType("int");

                    b.Property<int>("VideocardID")
                        .HasColumnType("int");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.Property<string>("WirelessCommunication")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OSId");

                    b.HasIndex("ProcessorId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("ScreenTypeId");

                    b.HasIndex("VideocardID");

                    b.ToTable("Notebooks");
                });

            modelBuilder.Entity("Web.Models.Linked.ProdMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("MovementTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseHistoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovementTypeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("PurchaseHistoryId");

                    b.HasIndex("TypeId");

                    b.ToTable("ProdMovements");
                });

            modelBuilder.Entity("Web.Models.Linked.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DiscountDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("ColorId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("TypeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Web.Models.Linked.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Web.Models.Linked.PurchaseHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPurchaseAgree")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TotalCost")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SellerId");

                    b.HasIndex("StatusId");

                    b.ToTable("PurchaseHistories");
                });

            modelBuilder.Entity("Web.Models.Linked.Smartphone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BatteryCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Camera")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChargingTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Communication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemoryCount")
                        .HasColumnType("int");

                    b.Property<bool>("NFC")
                        .HasColumnType("bit");

                    b.Property<int>("OSId")
                        .HasColumnType("int");

                    b.Property<string>("Optional")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProcessorId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<byte>("RAMCount")
                        .HasColumnType("tinyint");

                    b.Property<string>("ScreenResolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ScreenSize")
                        .HasColumnType("float");

                    b.Property<int>("ScreenTypeId")
                        .HasColumnType("int");

                    b.Property<short>("SimCount")
                        .HasColumnType("smallint");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChargingTypeId");

                    b.HasIndex("OSId");

                    b.HasIndex("ProcessorId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("ScreenTypeId");

                    b.ToTable("Smartphones");
                });

            modelBuilder.Entity("Web.Models.Linked.WireHeadphone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ConnectionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("WireLenght")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionTypeId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("WireHeadphones");
                });

            modelBuilder.Entity("Web.Models.Linked.WirelessHeadphone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short?>("Battery")
                        .HasColumnType("smallint");

                    b.Property<double>("BluetoothVersion")
                        .HasColumnType("float");

                    b.Property<short?>("CaseBattery")
                        .HasColumnType("smallint");

                    b.Property<int>("ChargingTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Radius")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChargingTypeId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("WirelessHeadphones");
                });

            modelBuilder.Entity("Web.Models.Simple.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Web.Models.Simple.ChargingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChargingTypes");
                });

            modelBuilder.Entity("Web.Models.Simple.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("Web.Models.Simple.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"), 1L, 1);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Web.Models.Simple.MovementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MovementTypes");
                });

            modelBuilder.Entity("Web.Models.Simple.OS", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("OS");
                });

            modelBuilder.Entity("Web.Models.Simple.Processor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Processors");
                });

            modelBuilder.Entity("Web.Models.Simple.ScreenType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScreenTypes");
                });

            modelBuilder.Entity("Web.Models.Simple.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("Web.Models.Simple.Videocard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Videocards");
                });

            modelBuilder.Entity("Web.Models.Linked.Accessory", b =>
                {
                    b.HasOne("Web.Models.Linked.Product", "Product")
                        .WithOne("Accessory")
                        .HasForeignKey("Web.Models.Linked.Accessory", "ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Web.Models.Linked.Client", b =>
                {
                    b.HasOne("Web.Models.Simple.Department", "Department")
                        .WithMany("Clients")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Models.Simple.Type", "Post")
                        .WithMany("Clients")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Web.Models.Linked.Notebook", b =>
                {
                    b.HasOne("Web.Models.Simple.OS", "OS")
                        .WithMany()
                        .HasForeignKey("OSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Models.Simple.Processor", "Processor")
                        .WithMany("Notebooks")
                        .HasForeignKey("ProcessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Models.Linked.Product", "Product")
                        .WithOne("Notebook")
                        .HasForeignKey("Web.Models.Linked.Notebook", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Models.Simple.ScreenType", "ScreenType")
                        .WithMany("Notebooks")
                        .HasForeignKey("ScreenTypeId");

                    b.HasOne("Web.Models.Simple.Videocard", "Videocard")
                        .WithMany("Notebooks")
                        .HasForeignKey("VideocardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OS");

                    b.Navigation("Processor");

                    b.Navigation("Product");

                    b.Navigation("ScreenType");

                    b.Navigation("Videocard");
                });

            modelBuilder.Entity("Web.Models.Linked.ProdMovement", b =>
                {
                    b.HasOne("Web.Models.Simple.MovementType", "MovementType")
                        .WithMany("ProdMovements")
                        .HasForeignKey("MovementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Models.Linked.Product", "Product")
                        .WithMany("ProdMovements")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Models.Linked.Provider", "Provider")
                        .WithMany("ProdMovement")
                        .HasForeignKey("ProviderId");

                    b.HasOne("Web.Models.Linked.PurchaseHistory", "PurchaseHistory")
                        .WithMany("ProdMovement")
                        .HasForeignKey("PurchaseHistoryId");

                    b.HasOne("Web.Models.Simple.Type", null)
                        .WithMany("ProdMovements")
                        .HasForeignKey("TypeId");

                    b.Navigation("MovementType");

                    b.Navigation("Product");

                    b.Navigation("Provider");

                    b.Navigation("PurchaseHistory");
                });

            modelBuilder.Entity("Web.Models.Linked.Product", b =>
                {
                    b.HasOne("Web.Models.Simple.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Models.Simple.Color", "Color")
                        .WithMany("Products")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Models.Simple.Department", "Department")
                        .WithMany("Products")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Models.Simple.Type", "Type")
                        .WithMany("Products")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Color");

                    b.Navigation("Department");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Web.Models.Linked.Provider", b =>
                {
                    b.HasOne("Web.Models.Simple.Department", "Department")
                        .WithMany("Providers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Web.Models.Linked.PurchaseHistory", b =>
                {
                    b.HasOne("Web.Models.Linked.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("Web.Models.Simple.Department", "department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Models.Linked.Client", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");

                    b.HasOne("Web.Models.Simple.Type", "Status")
                        .WithMany("PurchaseHistories")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Seller");

                    b.Navigation("Status");

                    b.Navigation("department");
                });

            modelBuilder.Entity("Web.Models.Linked.Smartphone", b =>
                {
                    b.HasOne("Web.Models.Simple.ChargingType", "ChargingType")
                        .WithMany("Smartphone")
                        .HasForeignKey("ChargingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Models.Simple.OS", "OS")
                        .WithMany()
                        .HasForeignKey("OSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Models.Simple.Processor", "Processor")
                        .WithMany("Smartphones")
                        .HasForeignKey("ProcessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Models.Linked.Product", "Product")
                        .WithOne("Smartphone")
                        .HasForeignKey("Web.Models.Linked.Smartphone", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Models.Simple.ScreenType", "ScreenType")
                        .WithMany("Smartphones")
                        .HasForeignKey("ScreenTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargingType");

                    b.Navigation("OS");

                    b.Navigation("Processor");

                    b.Navigation("Product");

                    b.Navigation("ScreenType");
                });

            modelBuilder.Entity("Web.Models.Linked.WireHeadphone", b =>
                {
                    b.HasOne("Web.Models.Simple.ChargingType", "ConnectionType")
                        .WithMany("WireHeadphone")
                        .HasForeignKey("ConnectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Models.Linked.Product", "Product")
                        .WithOne("WireHeadphones")
                        .HasForeignKey("Web.Models.Linked.WireHeadphone", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectionType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Web.Models.Linked.WirelessHeadphone", b =>
                {
                    b.HasOne("Web.Models.Simple.ChargingType", "ChargingType")
                        .WithMany("WirelessHeadphones")
                        .HasForeignKey("ChargingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.Models.Linked.Product", "Product")
                        .WithOne("WirelessHeadphones")
                        .HasForeignKey("Web.Models.Linked.WirelessHeadphone", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargingType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Web.Models.Linked.Product", b =>
                {
                    b.Navigation("Accessory");

                    b.Navigation("Notebook");

                    b.Navigation("ProdMovements");

                    b.Navigation("Smartphone");

                    b.Navigation("WireHeadphones");

                    b.Navigation("WirelessHeadphones");
                });

            modelBuilder.Entity("Web.Models.Linked.Provider", b =>
                {
                    b.Navigation("ProdMovement");
                });

            modelBuilder.Entity("Web.Models.Linked.PurchaseHistory", b =>
                {
                    b.Navigation("ProdMovement");
                });

            modelBuilder.Entity("Web.Models.Simple.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Web.Models.Simple.ChargingType", b =>
                {
                    b.Navigation("Smartphone");

                    b.Navigation("WireHeadphone");

                    b.Navigation("WirelessHeadphones");
                });

            modelBuilder.Entity("Web.Models.Simple.Color", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Web.Models.Simple.Department", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Products");

                    b.Navigation("Providers");
                });

            modelBuilder.Entity("Web.Models.Simple.MovementType", b =>
                {
                    b.Navigation("ProdMovements");
                });

            modelBuilder.Entity("Web.Models.Simple.Processor", b =>
                {
                    b.Navigation("Notebooks");

                    b.Navigation("Smartphones");
                });

            modelBuilder.Entity("Web.Models.Simple.ScreenType", b =>
                {
                    b.Navigation("Notebooks");

                    b.Navigation("Smartphones");
                });

            modelBuilder.Entity("Web.Models.Simple.Type", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("ProdMovements");

                    b.Navigation("Products");

                    b.Navigation("PurchaseHistories");
                });

            modelBuilder.Entity("Web.Models.Simple.Videocard", b =>
                {
                    b.Navigation("Notebooks");
                });
#pragma warning restore 612, 618
        }
    }
}
